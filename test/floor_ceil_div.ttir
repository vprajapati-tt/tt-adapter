#any_device = #tt.operand_constraint<dram|l1|scalar|tile|any_device|any_device_tile>
module attributes {torch.debug_module_name = "Model", tt.system_desc = #tt.system_desc<[<#tt.arch<wormhole_b0>, #tt.grid<8x8>>], [0], [<pcie|host_mmio>], [<0, 0, 0, 0>]>} {
  func.func @forward(%arg0: tensor<256x256xf32>, %arg1: tensor<256x256xf32>) -> tensor<256x256xf32> {
    %0 = tosa.floor %arg0 : (tensor<256x256xf32>) -> tensor<256x256xf32>
    %1 = tosa.floor %arg1 : (tensor<256x256xf32>) -> tensor<256x256xf32>
    %2 = tosa.reciprocal %1 : (tensor<256x256xf32>) -> tensor<256x256xf32>
    %3 = tensor.empty() : tensor<256x256xf32>
    %4 = "ttir.multiply"(%0, %2, %3) <{operandSegmentSizes = array<i32: 2, 1>, operand_constraints = [#any_device, #any_device, #any_device]}> : (tensor<256x256xf32>, tensor<256x256xf32>, tensor<256x256xf32>) -> tensor<256x256xf32>
    %5 = tosa.ceil %4 : (tensor<256x256xf32>) -> tensor<256x256xf32>
    return %5 : tensor<256x256xf32>
  }
}

